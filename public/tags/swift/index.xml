<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Battle of Brothers</title>
    <link>http://battleofbrothers.com/tags/swift/</link>
    <description>Recent content in Swift on Battle of Brothers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Feb 2015 13:22:40 +0000</lastBuildDate>
    
	<atom:link href="http://battleofbrothers.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Saving Game Data in SpriteKit</title>
      <link>http://battleofbrothers.com/sirryan/saving-game-data-in-spritekit/</link>
      <pubDate>Tue, 03 Feb 2015 13:22:40 +0000</pubDate>
      
      <guid>http://battleofbrothers.com/sirryan/saving-game-data-in-spritekit/</guid>
      <description>&lt;p&gt;When searching for tips on how to save game data in SpriteKit, most posts explain how to save one variable (high score, for example). In that regard, this &lt;a href=&#34;http://www.thinkingswiftly.com/saving-spritekit-game-data-swift-easy-nscoder/&#34; target=&#34;_blank&#34;&gt;Thinking Swiftly post&lt;/a&gt; was extremely helpful, and is where a majority of the code below comes from. I just wanted to extend that post, and look at how an entire object could be saved in a self contained way.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create Skippable Cutscenes in SpriteKit with Timing Functions</title>
      <link>http://battleofbrothers.com/sirryan/create-skippable-cutscenes-in-spritekit-with-timing-functions/</link>
      <pubDate>Mon, 26 Jan 2015 15:05:10 +0000</pubDate>
      
      <guid>http://battleofbrothers.com/sirryan/create-skippable-cutscenes-in-spritekit-with-timing-functions/</guid>
      <description>&lt;p&gt;Cutscenes are a labor of love, so it is hard accepting that some people just don&amp;#8217;t care. That story that took months to bring together may be amazing to you, but to others it is just an inconvenience. So, for that reason, we have to make cutscenes skippable. However, I didn&amp;#8217;t want to just settle at skipping the entire scene. I wanted to also make it skimmable for the speed readers, or those who are mildly interested.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SpriteKit: CPU gains from caching enumerateChildNodesWithName</title>
      <link>http://battleofbrothers.com/sirryan/spritekit-cpu-gains-from-caching-enumeratechildnodeswithname/</link>
      <pubDate>Mon, 05 Jan 2015 18:48:27 +0000</pubDate>
      
      <guid>http://battleofbrothers.com/sirryan/spritekit-cpu-gains-from-caching-enumeratechildnodeswithname/</guid>
      <description>&lt;p&gt;Those of you who follow me know that I&amp;#8217;m working on a game that will have ~200 nodes on the screen updating every frame. Because of that requirement, I&amp;#8217;m &lt;a href=&#34;http://battleofbrothers.com/sirryan/joy-of-debugging-command-swiftc-failed-with-exit-code-1&#34; target=&#34;_blank&#34;&gt;constantly looking&lt;/a&gt; at &lt;a href=&#34;http://battleofbrothers.com/sirryan/memory-usage-in-sprite-kit&#34; target=&#34;_blank&#34;&gt;how I can&lt;/a&gt; incrementally &lt;a href=&#34;http://battleofbrothers.com/sirryan/now-were-rolling&#34; target=&#34;_blank&#34;&gt;improve performance&lt;/a&gt;. Slowly but surely, I&amp;#8217;m making this game a well oiled machine. Today, I stumbled on a significant slow down, and the resulting fix that shaved off 16% CPU usage: caching &lt;code&gt;enumerateChildNodesWithName&lt;/code&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Joy of Debugging: Command swiftc failed with exit code 1</title>
      <link>http://battleofbrothers.com/sirryan/joy-of-debugging-command-swiftc-failed-with-exit-code-1/</link>
      <pubDate>Sun, 21 Dec 2014 17:51:14 +0000</pubDate>
      
      <guid>http://battleofbrothers.com/sirryan/joy-of-debugging-command-swiftc-failed-with-exit-code-1/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve been working through a particularly nasty issue, so it feels right to document it for anyone else who encounters it. Also, just to serve as a note and reminder that game development is full of unexpected, time consuming tasks on a near weekly basis. This most recent problem &amp;#8212; releasing a build to an iOS device fails to compile, but it works on the simulator. Specifically, this occurs when I try to change the Swift compiler optimization level.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Challenges You May Encounter While Porting Your SpriteKit Game to Swift</title>
      <link>http://battleofbrothers.com/sirryan/challenges-you-may-encounter-while-porting-your-spritekit-game-to-swift/</link>
      <pubDate>Wed, 18 Jun 2014 16:20:02 +0000</pubDate>
      
      <guid>http://battleofbrothers.com/sirryan/challenges-you-may-encounter-while-porting-your-spritekit-game-to-swift/</guid>
      <description>&lt;p&gt;The introduction of &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift&lt;/a&gt; comes at a perfect time for me. I’ve been working on a SpriteKit game in Objective-C for 10 weeks now, and some of the code is definitely in need of refactoring. Refactoring is known to be tedious, so being able to learn a new language during the process is a plus. I’ve been taking notes of any challenge I’ve come across during the conversion.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>